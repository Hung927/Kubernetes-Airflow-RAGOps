from dotenv import load_dotenv
load_dotenv(dotenv_path="dags/.env")

import os
import json
import ollama
import logging
from uuid import uuid4
from qdrant_client import QdrantClient, models


class Data_Embedding:
    def __init__(
        self, 
        embed_model: str = "imac/zpoint_large_embedding_zh",
        data_context_path: str = "dags/data/data_context.json"):
        """
        Initialize the Data_Embedding class.
        
        Args:
            embed_model: Model name for ollama
            data_context_path: Path to the data context file
        """
        self.data_context_path = data_context_path
        try:
            self.embed_model = embed_model
            self.data_context_path = data_context_path
            self.data_context = json.load(open(self.data_context_path, "r"))
            self.qdrant_client = QdrantClient(url=os.getenv("QDRANT_URL"))
        except Exception as e:
            logging.error(f"Error loading config or data context: {e}")
            self.data_context = {}
            self.qdrant_client = None
    
    def ollama_embedding(self, prompt: str, file_name: str = None) -> models.PointStruct:
        """
        Generate embedding using ollama.
        
        Args:
            model: Model name for ollama
            prompt: Text prompt to generate embedding
        
        Return:
            ollama_vector: Embedding vector generated by ollama
        """
        try:
            vector = ollama.embeddings(
                model=self.embed_model,
                prompt=prompt,
                options={"device": "cpu"},
                keep_alive="0s"
            )["embedding"]
            
            ollama_vector = models.PointStruct(
                id=str(uuid4()),
                vector=vector,
                payload={"document": prompt, "file_name": file_name}
            )
            
            return ollama_vector
        except Exception as e:
            logging.error(f"Error generating embedding: {e}")
            return None
      
    def create_collection(self, collection_name: str, vector_size: int) -> bool:
        """
        Create a collection in Qdrant if it does not exist.
        
        Args:
            collection_name: Name of the collection to create
            vector_size: Size of the vector for the collection
            
        Returns:
            bool: True if collection is created successfully, False otherwise
        """
        try:
            self.qdrant_client.create_collection(
                collection_name=collection_name,
                vectors_config=models.VectorParams(size=vector_size, distance=models.Distance.COSINE),
                optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),
                hnsw_config=models.HnswConfigDiff(on_disk=True, m=64, ef_construct=512)
            )
            logging.info(f"Collection {collection_name} created successfully.")
            return True
        except Exception as e:
            logging.error(f"Error creating collection: {e}")
            return False

    def collection_exists(self, collection_name: str) -> bool:
        """
        Check if the collection exists in Qdrant.
        
        Args:
            collection_name: Name of the collection to check
        
        Returns:
            bool: True if collection exists, False otherwise
        """
        try:
            if not any(collection.name == collection_name for collection in self.qdrant_client.get_collections().collections):
                logging.warning(f"Collection {collection_name} does not exist.")
                self.create_collection(collection_name, vector_size=1024)
                logging.info(f"Collection {collection_name} created.")
            else:
                logging.info(f"Collection {collection_name} exists.")
            return True
        except Exception as e:
            logging.error(f"Error checking collection existence: {e}")
            return False
           
    def insert_documents(self, ollama_vector: list, collection_name: str) -> bool:
        """
        Insert documents into a collection in Qdrant.
        
        Args:
            ollama_vector: List of PointStruct objects to insert
            collection_name: Name of the collection to insert documents into
        
        Returns:
            bool: True if documents are inserted successfully, False otherwise
        """
        try:
            if self.collection_exists(collection_name):
                self.qdrant_client.upsert(
                    collection_name=collection_name,
                    points=ollama_vector
                )
                logging.info(f"Documents inserted into {collection_name} successfully.")
                return True
        except Exception as e:
            logging.error(f"Error inserting documents: {e}")
            return False
    
    def documents_embedding(self):
        """
        Generate embeddings for documents in the data context and insert them into Qdrant collections.
        
        Returns:
            str: Success message if processing is completed successfully.
        """
        try:    
            files = [item for item in self.data_context.keys()]
            logging.info(f"File to process: {files}")
            
            for file in files:
                ollama_vector = []
                logging.info(f"Processing file: {file}")
                
                for document in self.data_context[file]:
                    ollama_vector.append(
                        self.ollama_embedding(
                            prompt=document,
                            file_name=file
                    ))
                    
                if ollama_vector:
                    if file == "squad.json":
                        collection_name = f"{file.split('.')[0]}_{self.embed_model.split('/')[-1]}"
                    else:
                        collection_name = f"{file.split('.')[-1]}_{self.embed_model.split('/')[-1]}"
                        
                    self.insert_documents(
                        ollama_vector=ollama_vector,
                        collection_name=collection_name
                    )
                    self.data_context.pop(file)
            
            with open(self.data_context_path, "w", encoding="utf-8") as f:
                json.dump(self.data_context, f, ensure_ascii=False, indent=4)
                    
            return "Documents embedding and insertion completed successfully."
        except Exception as e:
            logging.error(f"Error processing data: {e}")
            return "Error processing data."
        
            